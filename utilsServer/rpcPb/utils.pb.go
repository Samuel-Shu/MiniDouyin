// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.22.0--rc2
// source: utils.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//ffmpeg方法，截取视频一帧作为生成字节流
type FfmpegReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoUrl string `protobuf:"bytes,1,opt,name=videoUrl,proto3" json:"videoUrl,omitempty"`
	FrameNum int32  `protobuf:"varint,2,opt,name=frameNum,proto3" json:"frameNum,omitempty"`
}

func (x *FfmpegReq) Reset() {
	*x = FfmpegReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utils_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FfmpegReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FfmpegReq) ProtoMessage() {}

func (x *FfmpegReq) ProtoReflect() protoreflect.Message {
	mi := &file_utils_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FfmpegReq.ProtoReflect.Descriptor instead.
func (*FfmpegReq) Descriptor() ([]byte, []int) {
	return file_utils_proto_rawDescGZIP(), []int{0}
}

func (x *FfmpegReq) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *FfmpegReq) GetFrameNum() int32 {
	if x != nil {
		return x.FrameNum
	}
	return 0
}

type FfmpegRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoverByte []byte `protobuf:"bytes,1,rep,name=coverByte,proto3" json:"coverByte,omitempty"`
	Error     string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FfmpegRes) Reset() {
	*x = FfmpegRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utils_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FfmpegRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FfmpegRes) ProtoMessage() {}

func (x *FfmpegRes) ProtoReflect() protoreflect.Message {
	mi := &file_utils_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FfmpegRes.ProtoReflect.Descriptor instead.
func (*FfmpegRes) Descriptor() ([]byte, []int) {
	return file_utils_proto_rawDescGZIP(), []int{1}
}

func (x *FfmpegRes) GetCoverByte() []byte {
	if x != nil {
		return x.CoverByte
	}
	return nil
}

func (x *FfmpegRes) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

//md5密码加密
type Md5Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Md5Req) Reset() {
	*x = Md5Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utils_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Md5Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Md5Req) ProtoMessage() {}

func (x *Md5Req) ProtoReflect() protoreflect.Message {
	mi := &file_utils_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Md5Req.ProtoReflect.Descriptor instead.
func (*Md5Req) Descriptor() ([]byte, []int) {
	return file_utils_proto_rawDescGZIP(), []int{2}
}

func (x *Md5Req) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Md5Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Md5Password string `protobuf:"bytes,1,opt,name=md5Password,proto3" json:"md5Password,omitempty"`
}

func (x *Md5Res) Reset() {
	*x = Md5Res{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utils_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Md5Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Md5Res) ProtoMessage() {}

func (x *Md5Res) ProtoReflect() protoreflect.Message {
	mi := &file_utils_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Md5Res.ProtoReflect.Descriptor instead.
func (*Md5Res) Descriptor() ([]byte, []int) {
	return file_utils_proto_rawDescGZIP(), []int{3}
}

func (x *Md5Res) GetMd5Password() string {
	if x != nil {
		return x.Md5Password
	}
	return ""
}

var File_utils_proto protoreflect.FileDescriptor

var file_utils_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x09, 0x66, 0x66, 0x6d, 0x70, 0x65, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x3f, 0x0a, 0x09, 0x66, 0x66, 0x6d,
	0x70, 0x65, 0x67, 0x52, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42,
	0x79, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x42, 0x79, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x24, 0x0a, 0x06, 0x6d, 0x64,
	0x35, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x2a, 0x0a, 0x06, 0x6d, 0x64, 0x35, 0x52, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x64,
	0x35, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x64, 0x35, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x68, 0x0a, 0x0b,
	0x55, 0x74, 0x69, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x66, 0x66, 0x6d, 0x70, 0x65, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x66, 0x6d, 0x70, 0x65, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x25, 0x0a, 0x03, 0x4d, 0x64, 0x35, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x64, 0x35, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x64,
	0x35, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_utils_proto_rawDescOnce sync.Once
	file_utils_proto_rawDescData = file_utils_proto_rawDesc
)

func file_utils_proto_rawDescGZIP() []byte {
	file_utils_proto_rawDescOnce.Do(func() {
		file_utils_proto_rawDescData = protoimpl.X.CompressGZIP(file_utils_proto_rawDescData)
	})
	return file_utils_proto_rawDescData
}

var file_utils_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_utils_proto_goTypes = []interface{}{
	(*FfmpegReq)(nil), // 0: proto.ffmpegReq
	(*FfmpegRes)(nil), // 1: proto.ffmpegRes
	(*Md5Req)(nil),    // 2: proto.md5Req
	(*Md5Res)(nil),    // 3: proto.md5Res
}
var file_utils_proto_depIdxs = []int32{
	0, // 0: proto.UtilsServer.ParseCover:input_type -> proto.ffmpegReq
	2, // 1: proto.UtilsServer.Md5:input_type -> proto.md5Req
	1, // 2: proto.UtilsServer.ParseCover:output_type -> proto.ffmpegRes
	3, // 3: proto.UtilsServer.Md5:output_type -> proto.md5Res
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_utils_proto_init() }
func file_utils_proto_init() {
	if File_utils_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_utils_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FfmpegReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utils_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FfmpegRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utils_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Md5Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utils_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Md5Res); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_utils_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_utils_proto_goTypes,
		DependencyIndexes: file_utils_proto_depIdxs,
		MessageInfos:      file_utils_proto_msgTypes,
	}.Build()
	File_utils_proto = out.File
	file_utils_proto_rawDesc = nil
	file_utils_proto_goTypes = nil
	file_utils_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UtilsServerClient is the client API for UtilsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UtilsServerClient interface {
	//ffmpeg方法，截取视频一帧作为生成字节流
	ParseCover(ctx context.Context, in *FfmpegReq, opts ...grpc.CallOption) (*FfmpegRes, error)
	//md5密码加密
	Md5(ctx context.Context, in *Md5Req, opts ...grpc.CallOption) (*Md5Res, error)
}

type utilsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilsServerClient(cc grpc.ClientConnInterface) UtilsServerClient {
	return &utilsServerClient{cc}
}

func (c *utilsServerClient) ParseCover(ctx context.Context, in *FfmpegReq, opts ...grpc.CallOption) (*FfmpegRes, error) {
	out := new(FfmpegRes)
	err := c.cc.Invoke(ctx, "/proto.UtilsServer/ParseCover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServerClient) Md5(ctx context.Context, in *Md5Req, opts ...grpc.CallOption) (*Md5Res, error) {
	out := new(Md5Res)
	err := c.cc.Invoke(ctx, "/proto.UtilsServer/Md5", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilsServerServer is the server API for UtilsServer service.
type UtilsServerServer interface {
	//ffmpeg方法，截取视频一帧作为生成字节流
	ParseCover(context.Context, *FfmpegReq) (*FfmpegRes, error)
	//md5密码加密
	Md5(context.Context, *Md5Req) (*Md5Res, error)
}

// UnimplementedUtilsServerServer can be embedded to have forward compatible implementations.
type UnimplementedUtilsServerServer struct {
}

func (*UnimplementedUtilsServerServer) ParseCover(context.Context, *FfmpegReq) (*FfmpegRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseCover not implemented")
}
func (*UnimplementedUtilsServerServer) Md5(context.Context, *Md5Req) (*Md5Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Md5 not implemented")
}

func RegisterUtilsServerServer(s *grpc.Server, srv UtilsServerServer) {
	s.RegisterService(&_UtilsServer_serviceDesc, srv)
}

func _UtilsServer_ParseCover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FfmpegReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServerServer).ParseCover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UtilsServer/ParseCover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServerServer).ParseCover(ctx, req.(*FfmpegReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsServer_Md5_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Md5Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServerServer).Md5(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UtilsServer/Md5",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServerServer).Md5(ctx, req.(*Md5Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _UtilsServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UtilsServer",
	HandlerType: (*UtilsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseCover",
			Handler:    _UtilsServer_ParseCover_Handler,
		},
		{
			MethodName: "Md5",
			Handler:    _UtilsServer_Md5_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utils.proto",
}
